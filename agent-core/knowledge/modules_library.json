{
  "version": "1.0.0",
  "description": "Module templates library for Claude Agent System",
  "categories": {
    "components": {
      "react_functional_component": {
        "name": "React Functional Component",
        "description": "Modern React functional component with TypeScript",
        "framework": "react",
        "type": "component",
        "template": "import React from 'react';\n\ninterface {{ComponentName}}Props {\n  className?: string;\n  children?: React.ReactNode;\n}\n\nexport const {{ComponentName}}: React.FC<{{ComponentName}}Props> = ({\n  className = '',\n  children,\n  ...props\n}) => {\n  return (\n    <div className={`{{component-name}} ${className}`} {...props}>\n      {children}\n    </div>\n  );\n};\n\nexport default {{ComponentName}};",
        "test_template": "import { render, screen } from '@testing-library/react';\nimport {{ComponentName}} from './{{ComponentName}}';\n\ndescribe('{{ComponentName}}', () => {\n  it('renders correctly', () => {\n    render(<{{ComponentName}}>Test content</{{ComponentName}}>);\n    expect(screen.getByText('Test content')).toBeInTheDocument();\n  });\n\n  it('applies custom className', () => {\n    render(<{{ComponentName}} className=\"custom-class\">Test</{{ComponentName}}>);\n    expect(screen.getByText('Test')).toHaveClass('custom-class');\n  });\n});",
        "dependencies": ["react", "@types/react"],
        "file_extension": "tsx"
      },
      "button_component": {
        "name": "Button Component",
        "description": "Accessible button component with variants and states",
        "framework": "react",
        "type": "component",
        "template": "import React from 'react';\n\ntype ButtonVariant = 'primary' | 'secondary' | 'danger' | 'ghost';\ntype ButtonSize = 'sm' | 'md' | 'lg';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  isLoading?: boolean;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  variant = 'primary',\n  size = 'md',\n  isLoading = false,\n  leftIcon,\n  rightIcon,\n  children,\n  disabled,\n  className = '',\n  ...props\n}) => {\n  const baseClasses = 'inline-flex items-center justify-center font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2';\n  \n  const variantClasses = {\n    primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',\n    secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500',\n    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',\n    ghost: 'text-gray-700 hover:bg-gray-100 focus:ring-gray-500'\n  };\n  \n  const sizeClasses = {\n    sm: 'px-3 py-1.5 text-sm',\n    md: 'px-4 py-2 text-base',\n    lg: 'px-6 py-3 text-lg'\n  };\n  \n  const isDisabled = disabled || isLoading;\n  \n  return (\n    <button\n      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${isDisabled ? 'opacity-50 cursor-not-allowed' : ''} ${className}`}\n      disabled={isDisabled}\n      {...props}\n    >\n      {isLoading && (\n        <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\n          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" />\n          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n        </svg>\n      )}\n      {!isLoading && leftIcon && <span className=\"mr-2\">{leftIcon}</span>}\n      {children}\n      {!isLoading && rightIcon && <span className=\"ml-2\">{rightIcon}</span>}\n    </button>\n  );\n};\n\nexport default Button;",
        "test_template": "import { render, screen, fireEvent } from '@testing-library/react';\nimport Button from './Button';\n\ndescribe('Button', () => {\n  it('renders correctly', () => {\n    render(<Button>Click me</Button>);\n    expect(screen.getByRole('button')).toHaveTextContent('Click me');\n  });\n\n  it('handles click events', () => {\n    const handleClick = jest.fn();\n    render(<Button onClick={handleClick}>Click me</Button>);\n    fireEvent.click(screen.getByRole('button'));\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n\n  it('shows loading state', () => {\n    render(<Button isLoading>Loading</Button>);\n    expect(screen.getByRole('button')).toBeDisabled();\n  });\n\n  it('applies variant classes', () => {\n    render(<Button variant=\"danger\">Delete</Button>);\n    expect(screen.getByRole('button')).toHaveClass('bg-red-600');\n  });\n});",
        "dependencies": ["react", "@types/react"],
        "file_extension": "tsx"
      },
      "form_input": {
        "name": "Form Input Component",
        "description": "Accessible form input with validation and error states",
        "framework": "react",
        "type": "component",
        "template": "import React, { forwardRef } from 'react';\n\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  error?: string;\n  helperText?: string;\n  required?: boolean;\n}\n\nexport const Input = forwardRef<HTMLInputElement, InputProps>((\n  { label, error, helperText, required, className = '', id, ...props },\n  ref\n) => {\n  const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;\n  const errorId = `${inputId}-error`;\n  const helperId = `${inputId}-helper`;\n  \n  return (\n    <div className={`form-group ${className}`}>\n      <label \n        htmlFor={inputId}\n        className={`block text-sm font-medium text-gray-700 mb-1 ${required ? 'required' : ''}`}\n      >\n        {label}\n        {required && <span className=\"text-red-500 ml-1\" aria-label=\"required\">*</span>}\n      </label>\n      \n      <input\n        ref={ref}\n        id={inputId}\n        className={`\n          block w-full px-3 py-2 border rounded-md shadow-sm\n          focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\n          ${error \n            ? 'border-red-300 focus:ring-red-500 focus:border-red-500' \n            : 'border-gray-300'\n          }\n        `}\n        aria-invalid={!!error}\n        aria-describedby={`${error ? errorId : ''} ${helperText ? helperId : ''}`.trim()}\n        {...props}\n      />\n      \n      {error && (\n        <div id={errorId} role=\"alert\" className=\"mt-1 text-sm text-red-600\">\n          {error}\n        </div>\n      )}\n      \n      {helperText && !error && (\n        <div id={helperId} className=\"mt-1 text-sm text-gray-500\">\n          {helperText}\n        </div>\n      )}\n    </div>\n  );\n});\n\nInput.displayName = 'Input';\n\nexport default Input;",
        "test_template": "import { render, screen } from '@testing-library/react';\nimport Input from './Input';\n\ndescribe('Input', () => {\n  it('renders with label', () => {\n    render(<Input label=\"Email\" />);\n    expect(screen.getByLabelText('Email')).toBeInTheDocument();\n  });\n\n  it('shows error state', () => {\n    render(<Input label=\"Email\" error=\"Invalid email\" />);\n    expect(screen.getByRole('alert')).toHaveTextContent('Invalid email');\n    expect(screen.getByLabelText('Email')).toHaveAttribute('aria-invalid', 'true');\n  });\n\n  it('shows required indicator', () => {\n    render(<Input label=\"Email\" required />);\n    expect(screen.getByLabelText('required')).toBeInTheDocument();\n  });\n\n  it('shows helper text', () => {\n    render(<Input label=\"Email\" helperText=\"Enter your email address\" />);\n    expect(screen.getByText('Enter your email address')).toBeInTheDocument();\n  });\n});",
        "dependencies": ["react", "@types/react"],
        "file_extension": "tsx"
      }
    },
    "hooks": {
      "use_local_storage": {
        "name": "useLocalStorage Hook",
        "description": "React hook for managing localStorage with SSR support",
        "framework": "react",
        "type": "hook",
        "template": "import { useState, useEffect } from 'react';\n\ntype SetValue<T> = T | ((val: T) => T);\n\nexport function useLocalStorage<T>(\n  key: string,\n  initialValue: T\n): [T, (value: SetValue<T>) => void] {\n  // Get value from localStorage or use initial value\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    if (typeof window === 'undefined') {\n      return initialValue;\n    }\n    \n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n  \n  // Set value in localStorage and state\n  const setValue = (value: SetValue<T>) => {\n    try {\n      // Allow value to be a function for same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      \n      setStoredValue(valueToStore);\n      \n      if (typeof window !== 'undefined') {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      console.warn(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n  \n  // Listen for changes to localStorage\n  useEffect(() => {\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === key && e.newValue !== null) {\n        try {\n          setStoredValue(JSON.parse(e.newValue));\n        } catch (error) {\n          console.warn(`Error parsing localStorage value for key \"${key}\":`, error);\n        }\n      }\n    };\n    \n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, [key]);\n  \n  return [storedValue, setValue];\n}",
        "test_template": "import { renderHook, act } from '@testing-library/react';\nimport { useLocalStorage } from './useLocalStorage';\n\n// Mock localStorage\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n};\n\nObject.defineProperty(window, 'localStorage', {\n  value: localStorageMock,\n});\n\ndescribe('useLocalStorage', () => {\n  beforeEach(() => {\n    localStorageMock.getItem.mockClear();\n    localStorageMock.setItem.mockClear();\n  });\n\n  it('returns initial value when localStorage is empty', () => {\n    localStorageMock.getItem.mockReturnValue(null);\n    const { result } = renderHook(() => useLocalStorage('test', 'default'));\n    expect(result.current[0]).toBe('default');\n  });\n\n  it('sets value in localStorage', () => {\n    const { result } = renderHook(() => useLocalStorage('test', 'default'));\n    act(() => {\n      result.current[1]('new value');\n    });\n    expect(localStorageMock.setItem).toHaveBeenCalledWith('test', JSON.stringify('new value'));\n    expect(result.current[0]).toBe('new value');\n  });\n});",
        "dependencies": ["react"],
        "file_extension": "ts"
      },
      "use_fetch": {
        "name": "useFetch Hook",
        "description": "React hook for data fetching with loading and error states",
        "framework": "react",
        "type": "hook",
        "template": "import { useState, useEffect, useRef } from 'react';\n\ninterface UseFetchOptions {\n  dependencies?: any[];\n  skip?: boolean;\n}\n\ninterface UseFetchResult<T> {\n  data: T | null;\n  loading: boolean;\n  error: Error | null;\n  refetch: () => void;\n}\n\nexport function useFetch<T>(\n  url: string,\n  options: UseFetchOptions = {}\n): UseFetchResult<T> {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const abortControllerRef = useRef<AbortController | null>(null);\n  \n  const { dependencies = [], skip = false } = options;\n  \n  const fetchData = async () => {\n    if (skip) return;\n    \n    // Cancel previous request\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    \n    abortControllerRef.current = new AbortController();\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await fetch(url, {\n        signal: abortControllerRef.current.signal,\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const result = await response.json();\n      setData(result);\n    } catch (err) {\n      if (err instanceof Error && err.name !== 'AbortError') {\n        setError(err);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  useEffect(() => {\n    fetchData();\n    \n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, [url, skip, ...dependencies]);\n  \n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchData,\n  };\n}",
        "test_template": "import { renderHook, waitFor } from '@testing-library/react';\nimport { useFetch } from './useFetch';\n\n// Mock fetch\nglobal.fetch = jest.fn();\n\ndescribe('useFetch', () => {\n  beforeEach(() => {\n    (fetch as jest.Mock).mockClear();\n  });\n\n  it('fetches data successfully', async () => {\n    const mockData = { id: 1, name: 'Test' };\n    (fetch as jest.Mock).mockResolvedValueOnce({\n      ok: true,\n      json: () => Promise.resolve(mockData),\n    });\n\n    const { result } = renderHook(() => useFetch('/api/test'));\n\n    expect(result.current.loading).toBe(true);\n    expect(result.current.data).toBe(null);\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false);\n      expect(result.current.data).toEqual(mockData);\n    });\n  });\n\n  it('handles fetch errors', async () => {\n    (fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error'));\n\n    const { result } = renderHook(() => useFetch('/api/test'));\n\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false);\n      expect(result.current.error).toBeInstanceOf(Error);\n    });\n  });\n});",
        "dependencies": ["react"],
        "file_extension": "ts"
      }
    },
    "utilities": {
      "format_utils": {
        "name": "Format Utilities",
        "description": "Utility functions for formatting data",
        "framework": "vanilla",
        "type": "utility",
        "template": "/**\n * Format a number as currency\n */\nexport function formatCurrency(\n  amount: number,\n  currency: string = 'USD',\n  locale: string = 'en-US'\n): string {\n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency,\n  }).format(amount);\n}\n\n/**\n * Format a date in a human-readable format\n */\nexport function formatDate(\n  date: Date | string,\n  options: Intl.DateTimeFormatOptions = {},\n  locale: string = 'en-US'\n): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  \n  const defaultOptions: Intl.DateTimeFormatOptions = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  };\n  \n  return new Intl.DateTimeFormat(locale, { ...defaultOptions, ...options }).format(dateObj);\n}\n\n/**\n * Format a relative time (e.g., \"2 hours ago\")\n */\nexport function formatRelativeTime(\n  date: Date | string,\n  locale: string = 'en-US'\n): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  const now = new Date();\n  const diffInSeconds = Math.floor((now.getTime() - dateObj.getTime()) / 1000);\n  \n  const rtf = new Intl.RelativeTimeFormat(locale, { numeric: 'auto' });\n  \n  if (diffInSeconds < 60) {\n    return rtf.format(-diffInSeconds, 'second');\n  } else if (diffInSeconds < 3600) {\n    return rtf.format(-Math.floor(diffInSeconds / 60), 'minute');\n  } else if (diffInSeconds < 86400) {\n    return rtf.format(-Math.floor(diffInSeconds / 3600), 'hour');\n  } else {\n    return rtf.format(-Math.floor(diffInSeconds / 86400), 'day');\n  }\n}\n\n/**\n * Truncate text to a specified length\n */\nexport function truncateText(\n  text: string,\n  maxLength: number,\n  suffix: string = '...'\n): string {\n  if (text.length <= maxLength) {\n    return text;\n  }\n  \n  return text.slice(0, maxLength - suffix.length) + suffix;\n}\n\n/**\n * Capitalize the first letter of a string\n */\nexport function capitalize(text: string): string {\n  return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n}\n\n/**\n * Convert camelCase to kebab-case\n */\nexport function camelToKebab(text: string): string {\n  return text.replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`);\n}\n\n/**\n * Convert kebab-case to camelCase\n */\nexport function kebabToCamel(text: string): string {\n  return text.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());\n}",
        "test_template": "import {\n  formatCurrency,\n  formatDate,\n  formatRelativeTime,\n  truncateText,\n  capitalize,\n  camelToKebab,\n  kebabToCamel,\n} from './formatUtils';\n\ndescribe('formatUtils', () => {\n  describe('formatCurrency', () => {\n    it('formats USD currency correctly', () => {\n      expect(formatCurrency(1234.56)).toBe('$1,234.56');\n    });\n\n    it('formats other currencies', () => {\n      expect(formatCurrency(1234.56, 'EUR', 'de-DE')).toBe('1.234,56\\u00A0€');\n    });\n  });\n\n  describe('formatDate', () => {\n    it('formats date with default options', () => {\n      const date = new Date('2023-12-25');\n      expect(formatDate(date)).toBe('December 25, 2023');\n    });\n  });\n\n  describe('truncateText', () => {\n    it('truncates long text', () => {\n      expect(truncateText('Hello world!', 5)).toBe('He...');\n    });\n\n    it('returns original text if shorter than max length', () => {\n      expect(truncateText('Hi', 10)).toBe('Hi');\n    });\n  });\n\n  describe('capitalize', () => {\n    it('capitalizes first letter', () => {\n      expect(capitalize('hello world')).toBe('Hello world');\n    });\n  });\n\n  describe('camelToKebab', () => {\n    it('converts camelCase to kebab-case', () => {\n      expect(camelToKebab('helloWorld')).toBe('hello-world');\n    });\n  });\n\n  describe('kebabToCamel', () => {\n    it('converts kebab-case to camelCase', () => {\n      expect(kebabToCamel('hello-world')).toBe('helloWorld');\n    });\n  });\n});",
        "dependencies": [],
        "file_extension": "ts"
      },
      "validation_utils": {
        "name": "Validation Utilities",
        "description": "Utility functions for data validation",
        "framework": "vanilla",
        "type": "utility",
        "template": "/**\n * Email validation regex\n */\nconst EMAIL_REGEX = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n/**\n * Phone number validation regex (US format)\n */\nconst PHONE_REGEX = /^[\\+]?[1]?[\\s\\-\\.]?[(]?\\d{3}[)]?[\\s\\-\\.]?\\d{3}[\\s\\-\\.]?\\d{4}$/;\n\n/**\n * URL validation regex\n */\nconst URL_REGEX = /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)$/;\n\n/**\n * Validate email address\n */\nexport function isValidEmail(email: string): boolean {\n  return EMAIL_REGEX.test(email.trim());\n}\n\n/**\n * Validate phone number\n */\nexport function isValidPhone(phone: string): boolean {\n  return PHONE_REGEX.test(phone.replace(/\\s/g, ''));\n}\n\n/**\n * Validate URL\n */\nexport function isValidUrl(url: string): boolean {\n  return URL_REGEX.test(url.trim());\n}\n\n/**\n * Validate password strength\n */\nexport function validatePassword(password: string): {\n  isValid: boolean;\n  errors: string[];\n} {\n  const errors: string[] = [];\n  \n  if (password.length < 8) {\n    errors.push('Password must be at least 8 characters long');\n  }\n  \n  if (!/[A-Z]/.test(password)) {\n    errors.push('Password must contain at least one uppercase letter');\n  }\n  \n  if (!/[a-z]/.test(password)) {\n    errors.push('Password must contain at least one lowercase letter');\n  }\n  \n  if (!/\\d/.test(password)) {\n    errors.push('Password must contain at least one number');\n  }\n  \n  if (!/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)) {\n    errors.push('Password must contain at least one special character');\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n}\n\n/**\n * Validate required field\n */\nexport function isRequired(value: any): boolean {\n  if (typeof value === 'string') {\n    return value.trim().length > 0;\n  }\n  return value !== null && value !== undefined;\n}\n\n/**\n * Validate minimum length\n */\nexport function hasMinLength(value: string, minLength: number): boolean {\n  return value.length >= minLength;\n}\n\n/**\n * Validate maximum length\n */\nexport function hasMaxLength(value: string, maxLength: number): boolean {\n  return value.length <= maxLength;\n}\n\n/**\n * Validate number range\n */\nexport function isInRange(value: number, min: number, max: number): boolean {\n  return value >= min && value <= max;\n}\n\n/**\n * Validate array length\n */\nexport function hasValidArrayLength(\n  array: any[],\n  min: number = 0,\n  max?: number\n): boolean {\n  if (array.length < min) return false;\n  if (max !== undefined && array.length > max) return false;\n  return true;\n}\n\n/**\n * Sanitize HTML input\n */\nexport function sanitizeHtml(input: string): string {\n  const div = document.createElement('div');\n  div.textContent = input;\n  return div.innerHTML;\n}\n\n/**\n * Validate credit card number using Luhn algorithm\n */\nexport function isValidCreditCard(cardNumber: string): boolean {\n  const number = cardNumber.replace(/\\s/g, '');\n  \n  if (!/^\\d+$/.test(number)) {\n    return false;\n  }\n  \n  let sum = 0;\n  let isEven = false;\n  \n  for (let i = number.length - 1; i >= 0; i--) {\n    let digit = parseInt(number[i]);\n    \n    if (isEven) {\n      digit *= 2;\n      if (digit > 9) {\n        digit -= 9;\n      }\n    }\n    \n    sum += digit;\n    isEven = !isEven;\n  }\n  \n  return sum % 10 === 0;\n}",
        "test_template": "import {\n  isValidEmail,\n  isValidPhone,\n  isValidUrl,\n  validatePassword,\n  isRequired,\n  hasMinLength,\n  hasMaxLength,\n  isInRange,\n  isValidCreditCard,\n} from './validationUtils';\n\ndescribe('validationUtils', () => {\n  describe('isValidEmail', () => {\n    it('validates correct email formats', () => {\n      expect(isValidEmail('test@example.com')).toBe(true);\n      expect(isValidEmail('user.name@domain.co.uk')).toBe(true);\n    });\n\n    it('rejects invalid email formats', () => {\n      expect(isValidEmail('invalid-email')).toBe(false);\n      expect(isValidEmail('@example.com')).toBe(false);\n      expect(isValidEmail('test@')).toBe(false);\n    });\n  });\n\n  describe('validatePassword', () => {\n    it('validates strong passwords', () => {\n      const result = validatePassword('StrongPass123!');\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('rejects weak passwords', () => {\n      const result = validatePassword('weak');\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('isRequired', () => {\n    it('validates required fields', () => {\n      expect(isRequired('value')).toBe(true);\n      expect(isRequired('')).toBe(false);\n      expect(isRequired('  ')).toBe(false);\n      expect(isRequired(null)).toBe(false);\n      expect(isRequired(undefined)).toBe(false);\n    });\n  });\n\n  describe('isValidCreditCard', () => {\n    it('validates correct credit card numbers', () => {\n      expect(isValidCreditCard('4532015112830366')).toBe(true);\n      expect(isValidCreditCard('4532 0151 1283 0366')).toBe(true);\n    });\n\n    it('rejects invalid credit card numbers', () => {\n      expect(isValidCreditCard('1234567890123456')).toBe(false);\n      expect(isValidCreditCard('invalid')).toBe(false);\n    });\n  });\n});",
        "dependencies": [],
        "file_extension": "ts"
      }
    },
    "contexts": {
      "theme_context": {
        "name": "Theme Context",
        "description": "React context for theme management with dark mode support",
        "framework": "react",
        "type": "context",
        "template": "import React, { createContext, useContext, useState, useEffect } from 'react';\n\ntype Theme = 'light' | 'dark' | 'system';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  isDark: boolean;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n}\n\nexport function ThemeProvider({ children, defaultTheme = 'system' }: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(defaultTheme);\n  const [isDark, setIsDark] = useState(false);\n  \n  useEffect(() => {\n    // Get theme from localStorage on mount\n    const savedTheme = localStorage.getItem('theme') as Theme;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    }\n  }, []);\n  \n  useEffect(() => {\n    const updateTheme = () => {\n      let shouldBeDark = false;\n      \n      if (theme === 'dark') {\n        shouldBeDark = true;\n      } else if (theme === 'system') {\n        shouldBeDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      }\n      \n      setIsDark(shouldBeDark);\n      \n      // Update document class\n      if (shouldBeDark) {\n        document.documentElement.classList.add('dark');\n      } else {\n        document.documentElement.classList.remove('dark');\n      }\n      \n      // Save to localStorage\n      localStorage.setItem('theme', theme);\n    };\n    \n    updateTheme();\n    \n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      if (theme === 'system') {\n        updateTheme();\n      }\n    };\n    \n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [theme]);\n  \n  const value: ThemeContextType = {\n    theme,\n    setTheme,\n    isDark,\n  };\n  \n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme(): ThemeContextType {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}",
        "test_template": "import { render, screen, act } from '@testing-library/react';\nimport { ThemeProvider, useTheme } from './ThemeContext';\n\n// Mock localStorage\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n};\nObject.defineProperty(window, 'localStorage', { value: localStorageMock });\n\n// Mock matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(),\n    removeListener: jest.fn(),\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n\nfunction TestComponent() {\n  const { theme, setTheme, isDark } = useTheme();\n  return (\n    <div>\n      <span data-testid=\"theme\">{theme}</span>\n      <span data-testid=\"isDark\">{isDark.toString()}</span>\n      <button onClick={() => setTheme('dark')}>Set Dark</button>\n    </div>\n  );\n}\n\ndescribe('ThemeContext', () => {\n  beforeEach(() => {\n    localStorageMock.getItem.mockClear();\n    localStorageMock.setItem.mockClear();\n  });\n\n  it('provides theme context', () => {\n    render(\n      <ThemeProvider>\n        <TestComponent />\n      </ThemeProvider>\n    );\n    \n    expect(screen.getByTestId('theme')).toHaveTextContent('system');\n  });\n\n  it('allows theme changes', () => {\n    render(\n      <ThemeProvider>\n        <TestComponent />\n      </ThemeProvider>\n    );\n    \n    act(() => {\n      screen.getByText('Set Dark').click();\n    });\n    \n    expect(screen.getByTestId('theme')).toHaveTextContent('dark');\n    expect(localStorageMock.setItem).toHaveBeenCalledWith('theme', 'dark');\n  });\n});",
        "dependencies": ["react"],
        "file_extension": "tsx"
      }
    }
  },
  "patterns": {
    "compound_component": {
      "name": "Compound Component Pattern",
      "description": "Components that work together to form a cohesive interface",
      "example": "Tabs.Root, Tabs.List, Tabs.Tab, Tabs.Panel",
      "use_cases": ["Complex UI components", "Flexible APIs", "Composition patterns"]
    },
    "render_props": {
      "name": "Render Props Pattern",
      "description": "Share code between components using a prop whose value is a function",
      "example": "<DataProvider render={(data) => <Component data={data} />} />",
      "use_cases": ["Data fetching", "State sharing", "Reusable logic"]
    },
    "hoc": {
      "name": "Higher-Order Component",
      "description": "Function that takes a component and returns a new component with enhanced functionality",
      "example": "withAuth(Component), withLoading(Component)",
      "use_cases": ["Authentication", "Logging", "Performance monitoring"]
    },
    "custom_hooks": {
      "name": "Custom Hooks",
      "description": "Extract component logic into reusable functions",
      "example": "useAuth, useFetch, useLocalStorage",
      "use_cases": ["State management", "Side effects", "Reusable logic"]
    }
  },
  "best_practices": {
    "naming_conventions": {
      "components": "PascalCase (e.g., UserProfile, DataTable)",
      "files": "Match component name (e.g., UserProfile.tsx)",
      "props": "camelCase (e.g., isVisible, onSubmit)",
      "hooks": "camelCase with 'use' prefix (e.g., useAuth, useLocalStorage)",
      "constants": "UPPER_SNAKE_CASE (e.g., API_BASE_URL)"
    },
    "file_structure": {
      "components": "Group related components in folders",
      "hooks": "Separate hooks directory or co-located with components",
      "utils": "Shared utilities in utils directory",
      "types": "TypeScript types in types directory or co-located"
    },
    "accessibility": {
      "semantic_html": "Use appropriate HTML elements",
      "aria_labels": "Provide ARIA labels for screen readers",
      "keyboard_nav": "Ensure keyboard navigation works",
      "color_contrast": "Maintain sufficient color contrast ratios"
    },
    "performance": {
      "memoization": "Use React.memo, useMemo, useCallback appropriately",
      "code_splitting": "Implement lazy loading for large components",
      "bundle_size": "Keep bundle sizes reasonable",
      "rendering": "Avoid unnecessary re-renders"
    }
  }
}